// Generated by CoffeeScript 1.6.3
var Url, browserify, cacher, crypto, express, fs, getIncScript, glob, httpProxy, startServer;

express = require("express");

httpProxy = require("http-proxy");

Url = require("url");

browserify = require("browserify-middleware");

glob = require("glob");

fs = require("fs");

crypto = require("crypto");

cacher = function(options) {
  var cache, dir, types;
  if (!options.full) {
    return function(req, res, next) {
      return next();
    };
  }
  cache = options.cache;
  types = cache.types;
  dir = cache.directory;
  return function(req, res, next) {};
};

getIncScript = function(options) {
  var buffer, hash, script, scripts, tmpScript, _i, _j, _len, _len1, _ref;
  scripts = [];
  _ref = options.scripts;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    script = _ref[_i];
    scripts = glob.sync(script).concat(scripts);
  }
  buffer = [];
  for (_j = 0, _len1 = scripts.length; _j < _len1; _j++) {
    script = scripts[_j];
    buffer.push("require('" + script + "');");
  }
  hash = crypto.createHash('md5').update(options.cwd).digest("hex");
  tmpScript = "/tmp/" + hash + ".js";
  fs.writeFileSync(tmpScript, buffer.join("\n;"));
  return tmpScript;
};

/*
*/


startServer = function(options) {
  var port, proxy, server, urlInfo;
  options.cwd = process.cwd();
  proxy = new httpProxy.RoutingProxy();
  server = express();
  port = options.port || 8083;
  console.log("listening on port %d", port);
  urlInfo = Url.parse(options.proxy);
  server.use(cacher(options));
  server.use("/test", express["static"](__dirname + "/public"));
  server.use("/test/js/app.bundle.js", browserify(__dirname + "/public/js/index.js"));
  server.use("/test/js/scripts.bundle.js", browserify(getIncScript(options)));
  server.all("/**", function(req, res) {
    return proxy.proxyRequest(req, res, {
      host: urlInfo.hostname,
      port: urlInfo.port
    });
  });
  return server.listen(port);
};

exports.start = function(config) {
  return startServer(config);
};
