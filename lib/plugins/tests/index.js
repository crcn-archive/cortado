// Generated by CoffeeScript 1.6.3
var Tests, crypto, events, fs, glob,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

crypto = require("crypto");

glob = require("glob");

fs = require("fs");

events = require("events");

Tests = (function(_super) {
  __extends(Tests, _super);

  /*
  */


  function Tests(config) {
    this.config = config;
    this.bundle = __bind(this.bundle, this);
    this.search = this.config.get("scripts");
  }

  /*
  */


  Tests.prototype.bundle = function() {
    var buffer, hash, script, scripts, tmpScript, _i, _j, _len, _len1, _ref;
    scripts = [];
    _ref = this.search;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      script = _ref[_i];
      scripts = glob.sync(script).concat(scripts);
    }
    buffer = [];
    for (_j = 0, _len1 = scripts.length; _j < _len1; _j++) {
      script = scripts[_j];
      buffer.push("require('" + script + "');");
    }
    hash = crypto.createHash('md5').update(this.config.get("cwd")).digest("hex");
    tmpScript = "/tmp/" + hash + ".js";
    fs.writeFileSync(tmpScript, buffer.join("\n;"));
    this.emit("bundle", {
      path: tmpScript
    });
    return tmpScript;
  };

  return Tests;

})(events.EventEmitter);

exports.require = ["config", "pubsub"];

exports.load = function(config, pubsub) {
  var tests;
  tests = new Tests(config);
  return tests.on("bundle", function() {
    return pubsub.publish("reload");
  });
};

