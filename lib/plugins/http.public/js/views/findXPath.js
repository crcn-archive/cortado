// Generated by CoffeeScript 1.6.3
var FindBestXPathView, findXPath, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

findXPath = require("../utils/findXPath");

FindBestXPathView = (function(_super) {
  __extends(FindBestXPathView, _super);

  function FindBestXPathView() {
    this._onClickElement = __bind(this._onClickElement, this);
    this._cleanupListeners = __bind(this._cleanupListeners, this);
    this._cleanup = __bind(this._cleanup, this);
    _ref = FindBestXPathView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  FindBestXPathView.prototype.paper = require("./findXPath.pc");

  /*
  */


  FindBestXPathView.prototype.bindings = {
    "models.control.document": "doc"
  };

  /*
  */


  FindBestXPathView.prototype.events = ["mouseup", "mousedown", "click"];

  /*
  */


  FindBestXPathView.prototype.toggleFindXPath = function() {
    var _this = this;
    this.set("findXPath", !this.get("findXPath"));
    this.set("bestXPath", void 0);
    this._cleanup();
    if (!this.get("findXPath")) {
      return;
    }
    return this._docBinding = this.bind("doc").to(function(_cdoc) {
      var event, _i, _len, _ref1, _ref2, _results;
      _this._cdoc = _cdoc;
      _this._cleanupListeners();
      _ref1 = _this.events;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        event = _ref1[_i];
        _results.push((_ref2 = _this._cdoc) != null ? _ref2.addEventListener(event, _this._onClickElement, true) : void 0);
      }
      return _results;
    }).now();
  };

  /*
  */


  FindBestXPathView.prototype._cleanup = function() {
    var _ref1;
    if ((_ref1 = this._docBinding) != null) {
      _ref1.dispose();
    }
    return this._cleanupListeners();
  };

  /*
  */


  FindBestXPathView.prototype._cleanupListeners = function() {
    var event, _i, _len, _ref1, _ref2, _results;
    _ref1 = this.events;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      event = _ref1[_i];
      _results.push((_ref2 = this._cdoc) != null ? _ref2.removeEventListener(event, this._onClickElement, true) : void 0);
    }
    return _results;
  };

  /*
  */


  FindBestXPathView.prototype._onClickElement = function(event) {
    var e;
    event.preventDefault();
    event.stopImmediatePropagation();
    try {
      return this.set("bestXPath", String(findXPath(event.target)));
    } catch (_error) {
      e = _error;
      return this.set("bestXPath", String(e.message));
    }
  };

  return FindBestXPathView;

})(require("mojojs").View);

module.exports = FindBestXPathView;
