// Generated by CoffeeScript 1.6.3
var fasten, fastener, hurryup, trigger;

fasten = require("fasten");

fastener = fasten();

hurryup = require("hurryup");

trigger = function(els, event) {
  var el, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = els.length; _i < _len; _i++) {
    el = els[_i];
    _results.push(el.dispatchEvent(new Event(event)));
  }
  return _results;
};

fastener.add("actions", {
  visit: {
    type: "actions",
    call: function(url, next) {
      var _this = this;
      this.models.set("control.location", url);
      return this.models.bind("control.document", function() {
        return next(null, _this);
      }).once().now();
    }
  },
  type: {
    type: "actions",
    call: function(path, value, next) {
      var _this = this;
      return this.findElements(path, function(err, $elements) {
        if (err != null) {
          return next(err);
        }
        $elements.val(value);
        $elements.trigger("keydown");
        $elements.trigger("keyup");
        $elements.trigger("change");
        $elements.trigger("click");
        return next(null, _this);
      });
    }
  },
  enter: {
    type: "actions",
    call: function(path, next) {
      var _this = this;
      return this.findElements(path, function(err, $elements) {
        var e, name, _i, _len, _ref;
        if (err != null) {
          return next(err);
        }
        _ref = ["keyup", "keydown"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          e = actions.window.$.Event(name);
          e.which = 13;
          e.keyCode = 13;
          $elements.trigger(e);
        }
        $elements.submit();
        return next(null, _this);
      });
    }
  },
  select: {
    type: "actions",
    call: function(path, index, next) {
      var _this = this;
      return this.findElements(path, function(err, $elements) {
        var $opt;
        if (err != null) {
          return next(err);
        }
        $opt = $($elements.find("option")[index]);
        $elements.val($opt.val());
        $elements.trigger("change");
        $elements.trigger("mouseup");
        return next(null, _this);
      });
    }
  },
  click: {
    type: "actions",
    call: function(path, next) {
      var _this = this;
      return this.findElements(path, function(err, $elements) {
        var href;
        if (err != null) {
          return next(err);
        }
        $elements.click();
        href = $elements.attr("href");
        if (/^#/.test(href) && (actions.window.location.hash === href) || /^#$/.test(href)) {
          return next(null, _this);
        }
        if (href && (!/^http/.test(href) && /^[^\/]/.test(href))) {
          href = actions.window.location.pathname + href;
        }
        if (href) {
          actions.window.location = href;
        }
        return next(null, _this);
      });
    }
  },
  wait: {
    type: "actions",
    call: function(fn, timeout, next) {
      var _this = this;
      if (arguments.length === 2) {
        next = timeout;
        timeout = 1000 * 30;
      }
      return hurryup((function(next) {
        var run;
        run = function(next) {
          var err;
          try {
            if (fn.length === 1) {
              return fn(next);
            } else {
              fn();
              return next();
            }
          } catch (_error) {
            err = _error;
            return next(err);
          }
        };
        return run(next);
      }), {
        retry: true,
        timeout: timeout,
        retryTimeout: 500
      }).call(this, function(err) {
        if (err != null) {
          return next(err);
        }
        return next(null, _this);
      });
    }
  },
  find: {
    type: "actions",
    call: function(path, fn, next) {
      var _this = this;
      return this.findElements(path, function(err, $elements) {
        var e;
        if (err != null) {
          return next(err);
        }
        try {
          fn($elements);
        } catch (_error) {
          e = _error;
          next(e, _this);
        }
        return next(null, _this);
      });
    }
  }
});

module.exports = function(models) {
  var target;
  target = {
    models: models,
    findElements: function(path, next) {
      var fn;
      fn = hurryup((function(path, next) {
        var $els, cdoc, e;
        if (!(cdoc = models.get("control.document"))) {
          return next(new Error("control document is not defined"));
        }
        try {
          $els = models.get("control.window").$($(cdoc).xpath(path));
        } catch (_error) {
          e = _error;
          return next(new Error("xpath " + path + " is invalid"));
        }
        if (!$els.length) {
          return next(new Error("no elements found for path " + path));
        }
        return setTimeout((function() {
          return next(null, $els);
        }), 5);
      }), {
        timeout: 1000 * 30,
        retry: true,
        retryTimeout: 500
      });
      fn.call(this, path, next);
      return this;
    }
  };
  fastener = fastener.wrap("actions", target);
  models.bind("control.document", function(doc) {
    return fastener.document = doc;
  });
  models.bind("control.window", function(win) {
    return fastener.window = win;
  });
  fastener.on("error", function() {
    return models.addLog({
      description: "fail",
      success: false
    });
  });
  fastener.on("result", function(data) {
    return models.addLog({
      description: "" + data.method + "(" + (data.args.join(', ')) + ")",
      success: true,
      type: "action"
    });
  });
  return fastener;
};

