// Generated by CoffeeScript 1.6.3
var fasten, fastener, hurryup;

fasten = require("fasten");

fastener = fasten();

hurryup = require("hurryup");

fastener.add("actions", {
  visit: {
    type: "actions",
    call: function(url, next) {
      var _this = this;
      this.models.set("control.location", url);
      return this.models.bind("control.document", function() {
        return next(null, _this);
      }).once().now();
    }
  },
  type: {
    type: "actions",
    call: function(path, value, next) {
      var _this = this;
      return this.findElements(path, function(err, $elements) {
        if (err != null) {
          return next(err);
        }
        $elements.val(value);
        $elements.trigger("keydown");
        $elements.trigger("keyup");
        $elements.trigger("change");
        $elements.trigger("click");
        return next(null, _this);
      });
    }
  },
  click: {
    type: "actions",
    call: function(path, next) {
      var _this = this;
      return this.findElements(path, function(err, $elements) {
        if (err != null) {
          return next(err);
        }
        $elements.trigger("click");
        return next(null, _this);
      });
    }
  },
  wait: {
    type: "actions",
    call: function(fn, next) {
      var _this = this;
      return hurryup((function(next) {
        var e;
        try {
          fn();
        } catch (_error) {
          e = _error;
          return next(e);
        }
        return next();
      }), {
        retry: true,
        timeout: 1000 * 5,
        retryTimeout: 500
      }).call(this, function(err) {
        if (err != null) {
          return next(err);
        }
        return next(null, _this);
      });
    }
  },
  find: {
    type: "actions",
    call: function(path, fn, next) {
      var _this = this;
      return this.findElements(path, function(err, $elements) {
        var e;
        if (err != null) {
          return next(err);
        }
        try {
          fn($elements);
        } catch (_error) {
          e = _error;
          next(e, _this);
        }
        return next(null, _this);
      });
    }
  }
});

module.exports = function(models) {
  var target;
  target = {
    models: models,
    findElements: function(path, next) {
      var fn;
      fn = hurryup((function(path, next) {
        var $els, cdoc, e;
        if (!(cdoc = models.get("control.document"))) {
          return next(new Error("control document is not defined"));
        }
        try {
          $els = $(cdoc).xpath(path);
        } catch (_error) {
          e = _error;
          return next(new Error("xpath " + path + " is invalid"));
        }
        if (!$els.length) {
          return next(new Error("no elements found for path " + path));
        }
        return setTimeout((function() {
          return next(null, $els);
        }), 5);
      }), {
        timeout: 1000 * 5,
        retry: true,
        retryTimeout: 500
      });
      fn.call(this, path, next);
      return this;
    }
  };
  fastener = fastener.wrap("actions", target);
  models.bind("control.document", function(doc) {
    return fastener.document = doc;
  });
  fastener.on("error", function() {
    return models.addLog({
      description: "fail",
      success: false
    });
  });
  fastener.on("result", function(data) {
    return models.addLog({
      description: "" + data.method + "(" + (data.args.join(', ')) + ")",
      success: true,
      type: "action"
    });
  });
  return fastener;
};
