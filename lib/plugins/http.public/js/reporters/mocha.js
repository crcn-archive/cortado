// Generated by CoffeeScript 1.6.3
var bindable, _getFullTitle;

bindable = require("bindable");

_getFullTitle = function(test) {
  var buffer, p;
  buffer = [];
  p = test;
  while (p) {
    buffer.unshift(p.title);
    p = p.parent;
  }
  return buffer.join(" ");
};

module.exports = function(models, client) {
  return function(runner) {
    var current, durInterval, duration, errors, failureCount, successCount;
    current = void 0;
    successCount = 0;
    failureCount = 0;
    duration = 0;
    errors = [];
    durInterval = setInterval((function() {
      return models.set("testDuration", "" + (++duration) + " s");
    }), 1000);
    runner.on("start", function() {
      return client.send({
        event: "startTests"
      });
    });
    runner.on("end", function() {
      clearTimeout(durInterval);
      client.send({
        event: "endTests",
        data: {
          errors: errors,
          successCount: successCount,
          failureCount: failureCount,
          duration: duration
        }
      });
      return models.addLog({
        description: "All tests complete",
        type: "test",
        success: true
      });
    });
    runner.on("fail", function(test, err) {
      test.error = err;
      if (test.type === "hook" || (err != null ? err.uncaught : void 0)) {
        return runner.emit("test end", test);
      }
    });
    return runner.on("test end", function(test) {
      var desc, err, skipped;
      if (test.error) {
        failureCount++;
      } else {
        successCount++;
      }
      skipped = test.pending === true;
      models.addLog({
        description: desc = _getFullTitle(test),
        type: "test",
        state: test.state,
        pending: false,
        success: test.state === "passed",
        time: skipped ? 0 : test.duration
      });
      if (test.error) {
        err = {
          message: test.error.message
        };
        errors.push(err);
      }
      client.send({
        event: "test",
        data: {
          description: desc,
          error: err
        }
      });
      models.set({
        failureCount: failureCount,
        successCount: successCount
      });
      if (test.error) {
        models.addLog({
          description: test.error.message,
          type: "error"
        });
        return client.send({
          event: "fail",
          data: err
        });
      }
    });
  };
};
