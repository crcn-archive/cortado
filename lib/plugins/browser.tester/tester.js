// Generated by CoffeeScript 1.6.3
var EventEmitter, Tester,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require("events").EventEmitter;

Tester = (function(_super) {
  __extends(Tester, _super);

  /*
  */


  function Tester(_launcher, browser, clients) {
    var _ref;
    this._launcher = _launcher;
    this.browser = browser;
    this.clients = clients;
    _ref = this.browser.split("@"), this.browserName = _ref[0], this.browserVersion = _ref[1];
  }

  /*
  */


  Tester.prototype.run = function(next) {
    var _this = this;
    console.log("(%s) opening", this.browser);
    this._launcher.start(this.browser, "http://student.classdojo.dev:8083/test", function(err, browser) {
      var listener;
      if (err != null) {
        return next(err);
      }
      return _this.clients.on("open", listener = function(event) {
        var client, name, p, version;
        p = event.data.platform;
        version = p.version.split(".").shift();
        name = p.name.toLowerCase();
        client = event.client;
        if (name !== _this.browserName || version !== _this.browserVersion) {
          return;
        }
        console.log("(%s) running tests", _this.browser);
        _this.clients.removeListener("open", listener);
        client.send({
          event: "runTests"
        });
        client.on("test", function(data) {
          var inf;
          inf = "" + _this.browser + " - " + data.description;
          if (data.error) {
            console.error("(%s) ✘ %s", _this.browser, data.description);
            _this.emit("error", new Error(inf));
            return console.error("(%s)  ", _this.browser, data.error.message);
          } else {
            console.log("(%s) ✔ %s", _this.browser, data.description);
            return _this.emit("success", {
              message: inf
            });
          }
        });
        return client.once("endTests", function(result) {
          var errors, _ref;
          console.log("(%s) success: %d, errors: %d, duration: %s ", _this.browser, result.successCount, result.failureCount, result.duration + " s");
          errors = (_ref = result.errors) != null ? _ref.map(function(err) {
            return err.message;
          }).join("\n") : void 0;
          return next(errors ? new Error(errors) : void 0);
        });
      });
    });
    return this;
  };

  return Tester;

})(EventEmitter);

module.exports = Tester;
