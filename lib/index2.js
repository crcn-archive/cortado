// Generated by CoffeeScript 1.6.3
var Clients, Url, browserify, cacher, crypto, events, express, fs, gaze, glob, http, httpProxy, sockjs, startServer, watchTests;

express = require("express");

httpProxy = require("http-proxy");

Url = require("url");

browserify = require("browserify-middleware");

glob = require("glob");

fs = require("fs");

crypto = require("crypto");

events = require("events");

gaze = require("gaze");

sockjs = require("sockjs");

http = require("http");

Clients = require("./clients");

/*
*/


cacher = function(options) {
  var cache, dir, types;
  if (!options.full) {
    return function(req, res, next) {
      return next();
    };
  }
  cache = options.cache;
  types = cache.types;
  dir = cache.directory;
  return function(req, res, next) {};
};

/*
*/


watchTests = function(options, clients) {
  clients.on("startTests", function() {
    return console.log("starting tests");
  });
  clients.on("test", function(data) {
    if (data.error) {
      console.error("✘", data.description);
      return console.error("  ", data.error.message);
    } else {
      return console.log("✔", data.description);
    }
  });
  return clients.on("endTests", function(data) {
    console.log("tests complete");
    return console.log("success: %d, failure: %d, duration: %d s", data.successCount, data.failureCount, data.duration);
  });
};

/*
*/


startServer = function(options) {
  var app, clients, port, proxy, server, sock, urlInfo;
  options.cwd = process.cwd();
  proxy = new httpProxy.RoutingProxy();
  app = express();
  server = http.createServer(app);
  port = options.port || 8083;
  console.log("listening on port %d", port);
  urlInfo = Url.parse(options.proxy);
  app.use(cacher(options));
  app.use("/test", express["static"](__dirname + "/public"));
  app.use("/test/js/app.bundle.js", browserify(__dirname + "/public/js/index.js"));
  sock = sockjs.createServer({
    sockjs_url: "http://cdn.sockjs.org/sockjs-0.3.min.js",
    log: function() {}
  });
  clients = new Clients(sock);
  sock.installHandlers(server, {
    prefix: "/sock"
  });
  app.use("/test/js/scripts.bundle.js", browserify(saveBundledScripts(clients, options)));
  watchScripts(options, function() {
    return saveBundledScripts(clients, options);
  });
  watchTests(options, clients);
  app.all("/**", function(req, res) {
    return proxy.proxyRequest(req, res, {
      host: urlInfo.hostname,
      port: urlInfo.port
    });
  });
  return server.listen(port);
};

exports.start = function(config) {
  return startServer(config);
};
